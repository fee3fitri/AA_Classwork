# ----- conjunct_select -----
# Write a method conjunct_select that accepts an array and one or more procs as arguments.
# The method should return a new array containing the elements that return true when passed
# into all of the given procs.

def conjunct_select(arr, *procs)
    new_arr = []
    procs.each_with_index do |proc, i|
        arr.each { |el| new_arr << el if proc.call(el) }
    end
    new_arr.select { |el| new_arr.count(el) == procs.length }.uniq
end

is_positive = Proc.new { |n| n > 0 }
is_odd = Proc.new { |n| n.odd? }
less_than_ten = Proc.new { |n| n < 10 }

# p conjunct_select([4, 8, -2, 11, 7, -3, 13], is_positive) # [4, 8, 11, 7, 13]
# p conjunct_select([4, 8, -2, 11, 7, -3, 13], is_positive, is_odd) # [11, 7, 13]
# p conjunct_select([4, 8, -2, 11, 7, -3, 13], is_positive, is_odd, less_than_ten) # [7]



# ----- convert_pig_latin ----
# Write a method convert_pig_latin that accepts a sentence as an argument. The method should
# translate the sentence according to the following rules:
# - words that are shorter than 3 characters are unchanged
# - words that are 3 characters or longer are translated according to the following rules:
#   - if the word begins with a vowel, simply add 'yay' to the end of the word
#     (example: 'eat'->'eatyay')
#   - if the word begins with a non-vowel, move all letters that come before the word's first
#     vowel to the end of the word and add 'ay' (example: 'trash'->'ashtray')
#
# Note that if words are capitalized in the original sentence, they should remain capitalized
# in the translated sentence. Vowels are the letters a, e, i, o, u.

VOWELS = 'aeiou'

def convert_pig_latin(sent)
    new_words = []
    sent.split.each do |word|
        if word.length < 3
            new_words << word
        else
            new_words << pig_latin_word(word)
        end
    end
    new_words.join(' ')
end

def pig_latin_word(word)
    new_word = ''
    down = word.downcase
    vowels = down.split('').select { |char| VOWELS.include?(char) }
    first = down.index(vowels[0])
    word.each_char.with_index do |char, i|
        if VOWELS.include?(down[0])
            new_word = word + 'yay'
        else
            if word[0] == word[0].upcase
                new_word = down[first].upcase + down[(first + 1)..-1] + down[0...first] + 'ay'
            else
                new_word = down[first..-1] + down[0...first] + 'ay'
            end
        end
    end
    new_word
end

# p convert_pig_latin('We like to eat bananas') # "We ikelay to eatyay ananasbay"
# p convert_pig_latin('I cannot find the trash') # "I annotcay indfay ethay ashtray"
# p convert_pig_latin('What an interesting problem') # "Atwhay an interestingyay oblempray"
# p convert_pig_latin('Her family flew to France') # "Erhay amilyfay ewflay to Ancefray"
# p convert_pig_latin('Our family flew to France') # "Ouryay amilyfay ewflay to Ancefray"



# ----- reverberate -----
# Write a method reverberate that accepts a sentence as an argument. The method should
# translate the sentence according to the following rules:
# - words that are shorter than 3 characters are unchanged
# - words that are 3 characters or longer are translated according to the following rules:
#   - if the word ends with a vowel, simply repeat the word twice (example: 'like'->'likelike')
#   - if the word ends with a non-vowel, repeat all letters that come after the word's last vowel, including the last vowel itself (example: 'trash'->'trashash')
#
# Note that if words are capitalized in the original sentence, they should remain capitalized
# in the translated sentence. Vowels are the letters a, e, i, o, u.

def reverberate(sent)
    new_words = []
    sent.split.each do |word|
        if word.length < 3
            new_words << word
        else
            new_words << changed_word(word)
        end
    end
    new_words.join(' ')
end

def changed_word(word)
    new_word = ''
    down = word.downcase
    vowels = down.split('').select { |char| VOWELS.include?(char) }
    last = down.index(vowels[-1])

    word.each_char.with_index do |char, i|
        if word[0] == word[0].upcase
            if VOWELS.include?(down[-1])
                new_word = (word * 2).capitalize
            else
                new_word = down[0].upcase + down[1..-1] + down[last..-1]
            end
        else
            if VOWELS.include?(down[-1])
                new_word = word * 2
            else
                new_word = down + down[last..-1]
            end
        end
    end
    new_word
end

# p reverberate('We like to go running fast') # "We likelike to go runninging fastast"
# p reverberate('He cannot find the trash') # "He cannotot findind thethe trashash"
# p reverberate('Pasta is my favorite dish') # "Pastapasta is my favoritefavorite dishish"
# p reverberate('Her family flew to France') # "Herer familyily flewew to Francefrance"



# ----- disjunct_select -----
# Write a method disjunct_select that accepts an array and one or more procs as arguments.
# The method should return a new array containing the elements that return true when passed
# into at least one of the given procs.

def disjunct_select(arr, *procs)
    new_arr = []
    arr.each do |el|
        procs.each do |proc|
            new_arr << el if proc.call(el)
        end
    end
    new_arr
end

longer_four = Proc.new { |s| s.length > 4 }
contains_o = Proc.new { |s| s.include?('o') }
starts_a = Proc.new { |s| s[0] == 'a' }

# p disjunct_select(['ace', 'dog', 'apple', 'teeming', 'boot', 'zip'],
#     longer_four,
# ) # ["apple", "teeming"]

# p disjunct_select(['ace', 'dog', 'apple', 'teeming', 'boot', 'zip'],
#     longer_four,
#     contains_o
# ) # ["dog", "apple", "teeming", "boot"]

# p disjunct_select(['ace', 'dog', 'apple', 'teeming', 'boot', 'zip'],
#     longer_four,
#     contains_o,
#     starts_a
# ) # ["ace", "dog", "apple", "teeming", "boot"]



# ----- alternating_vowel -----
# Write a method alternating_vowel that accepts a sentence as an argument. The method should
# return a new sentence where the words alternate between having their first or last vowel
# removed. For example:
# - the 1st word should be missing its first vowel
# - the 2nd word should be missing its last vowel
# - the 3rd word should be missing its first vowel
# - the 4th word should be missing its last vowel
# - ... and so on
#
# Note that words that contain no vowels should remain unchanged. Vowels are the letters a, e, i, o, u.

def alternating_vowel(sent)
    words = sent.split
    new_sent = []
    words.each_with_index do |word, i|
        if has_vowel?(word)
            if i.even?
                new_sent << first_vowel_removed(word)
            else
                new_sent << last_vowel_removed(word)
            end
        else
            new_sent << word
        end
    end
    new_sent.join(' ')
end

def has_vowel?(word)
    vowels_bool = []
    word.each_char { |char| vowels_bool << VOWELS.include?(char) }
    vowels_bool.any?
end

def vowels_idx(word)
    idx = []
    word.each_char.with_index do |char, i| 
        idx << i if VOWELS.include?(char)
    end
    idx
end

def first_vowel_removed(word)
    first_i = vowels_idx(word)[0]
    word[0...first_i] + word[(first_i + 1)..-1]
end

def last_vowel_removed(word)
    last_i = vowels_idx(word)[-1]
    word[0...last_i] + word[(last_i + 1)..-1]
end

# p alternating_vowel('panthers are great animals') # "pnthers ar grat animls"
# p alternating_vowel('running panthers are epic') # "rnning panthrs re epc"
# p alternating_vowel('code properly please') # "cde proprly plase"
# p alternating_vowel('my forecast predicts rain today') # "my forecst prdicts ran tday"



# ----- silly_talk -----
# Write a method silly_talk that accepts a sentence as an argument. The method should
# translate each word of the sentence according to the following rules:
# - if the word ends with a vowel, simply repeat that vowel at the end of the word
#   (example: 'code'->'codee')
# - if the word ends with a non-vowel, every vowel of the word should be followed by 'b'
#   and that same vowel (example: 'siren'->'sibireben')
#
# Note that if words are capitalized in the original sentence, they should remain capitalized
# in the translated sentence. Vowels are the letters a, e, i, o, u.

def silly_talk(sent)
    new_sent = []
    words = sent.split
    words.each do |word|
        if !end_with_vowel?(word)
            if word == word.capitalize
                new_sent << silly_word(word).capitalize
            else
                new_sent << silly_word(word)
            end
        else
            new_sent << word + word[-1]
        end
    end
    new_sent.join(' ')
end

def end_with_vowel?(word)
    VOWELS.include?(word[-1])
end

def silly_word(word)
    modified = ''
    word.downcase.each_char.with_index do |char, i|
        if VOWELS.include?(char)
            modified += char + 'b' + char
        else
            modified += char
        end
    end
    modified
end

# p silly_talk('Kids like cats and dogs') # "Kibids likee cabats aband dobogs"
# p silly_talk('Stop that scooter') # "Stobop thabat scobooboteber"
# p silly_talk('They can code') # "Thebey caban codee"
# p silly_talk('He flew to Italy') # "Hee flebew too Ibitabaly"



# ----- compress -----
# Write a method compress that accepts a string as an argument.
# The method should return a "compressed" version of the string 
# where streaks of consecutive letters are translated to a single 
# appearance of the letter followed by the number of times it 
# appears in the streak. If a letter does not form a streak 
# (meaning that it appears alone), then do not add a number after it.

def compress(str)
    new_str = ''
    i = 0
    while i < str.length
        count = 1
        char = str[i]
        i += 1
        
        while char == str[i]
            count += 1
            i += 1
        end

        if count > 1
            new_str += char + count.to_s
        else
            new_str += char
        end
    end
    new_str
end

p compress('aabbbbc')   # "a2b4c"
p compress('boot')      # "bo2t"
p compress('xxxyxxzzzz')# "x3yx2z4"
